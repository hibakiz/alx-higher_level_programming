Test cases for 0-add_integer module
===================================

The function must add two intgers and return an integer

import the module:
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Cases with correct matrix of positive integers:
>>> matrix = [[1,2,3],[4,5,6]]

case 1: normal division
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

case 2: division by zero
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

case 3: div is a string
>>> matrix_divided(matrix, "world")
Traceback (most recent call last):
    ...
TypeError: div must be a number

case 4: div is a float
>>> matrix_divided(matrix, 2.5)
[[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

case 5: div  is a negative integer number:
>>> matrix_divided(matrix, -3)
[[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]

case 6: div is a negative float:
>>> matrix_divided(matrix, -2.5)
[[-0.4, -0.8, -1.2], [-1.6, -2.0, -2.4]]

===========================================================
Cases with matrix contains negative numbers:
>>> matrix = [[1,-2,3],[-4,5,6]]

case 1: normal division
>>> matrix_divided(matrix, 3)
[[0.33, -0.67, 1.0], [-1.33, 1.67, 2.0]]

case 2: division by zero
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

case 3: div is a string
>>> matrix_divided(matrix, "world")
Traceback (most recent call last):
    ...
TypeError: div must be a number

case 4: div is a float
>>> matrix_divided(matrix, 2.5)
[[0.4, -0.8, 1.2], [-1.6, 2.0, 2.4]]

case 5: div  is a negative integer number:
>>> matrix_divided(matrix, -3)
[[-0.33, 0.67, -1.0], [1.33, -1.67, -2.0]]

case 6: div is a negative float:
>>> matrix_divided(matrix, -2.5)
[[-0.4, 0.8, -1.2], [1.6, -2.0, -2.4]]

============================================================
Cases with float matrix member
>>> matrix = [[1,2.4,3],[4,5.6,6]]


case 1: normal division
>>> matrix_divided(matrix, 3)
[[0.33, 0.8, 1.0], [1.33, 1.87, 2.0]]

case 2: division by zero
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

case 3: div is a string
>>> matrix_divided(matrix, "world")
Traceback (most recent call last):
    ...
TypeError: div must be a number

case 4: div is a float
>>> matrix_divided(matrix, 2.5)
[[0.4, 0.96, 1.2], [1.6, 2.24, 2.4]]

case 5: div  is a negative integer number:
>>> matrix_divided(matrix, -3)
[[-0.33, -0.8, -1.0], [-1.33, -1.87, -2.0]]

case 6: div is a negative float:
>>> matrix_divided(matrix, -2.5)
[[-0.4, -0.96, -1.2], [-1.6, -2.24, -2.4]]

============================================================
Cases with negative float matrix
>>> matrix = [[1, -2.4, 3],[4, -5.6, 6]]


case 1: normal division
>>> matrix_divided(matrix, 3)
[[0.33, -0.8, 1.0], [1.33, -1.87, 2.0]]

case 2: division by zero
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

case 3: div is a string
>>> matrix_divided(matrix, "world")
Traceback (most recent call last):
    ...
TypeError: div must be a number

case 4: div is a float
>>> matrix_divided(matrix, 2.5)
[[0.4, -0.96, 1.2], [1.6, -2.24, 2.4]]

case 5: div  is a negative integer number:
>>> matrix_divided(matrix, -3)
[[-0.33, 0.8, -1.0], [-1.33, 1.87, -2.0]]

case 6: div is a negative float:
>>> matrix_divided(matrix, -2.5)
[[-0.4, 0.96, -1.2], [-1.6, 2.24, -2.4]]

============================================================
cases with unequal lists in the matrix 
>>> matrix = [[1,2,3],[4,5]]

case 1: normal division
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

case 2: division by zero
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

case 3: div is a string
>>> matrix_divided(matrix, "world")
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

case 4: div is a float
>>> matrix_divided(matrix, 2.5)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

case 5: div  is a negative integer number:
>>> matrix_divided(matrix, -3)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

case 6: div is a negative float:
>>> matrix_divided(matrix, -2.5)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

============================================================
Cases with matrix of non integer elements
>>> matrix = [[1, 'Hiba', 2], [3, 4, 5]]

case 1: normal division
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case 2: division by zero
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case 3: div is a string
>>> matrix_divided(matrix, "world")
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case 4: div is a float
>>> matrix_divided(matrix, 2.5)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case 5: div  is a negative integer number:
>>> matrix_divided(matrix, -3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case 6: div is a negative float:
>>> matrix_divided(matrix, -2.5)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

============================================================
Cases with matrix of non integer elements
>>> matrix = [[]]

case 1: normal division
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case 2: division by zero
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case 3: div is a string
>>> matrix_divided(matrix, "world")
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case 4: div is a float
>>> matrix_divided(matrix, 2.5)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case 5: div  is a negative integer number:
>>> matrix_divided(matrix, -3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case 6: div is a negative float:
>>> matrix_divided(matrix, -2.5)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

============================================================
Cases with matrix of non integer elements
>>> matrix = "Ates dustum"

case 1: normal division
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case 2: division by zero
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case 3: div is a string
>>> matrix_divided(matrix, "world")
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case 4: div is a float
>>> matrix_divided(matrix, 2.5)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case 5: div  is a negative integer number:
>>> matrix_divided(matrix, -3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case 6: div is a negative float:
>>> matrix_divided(matrix, -2.5)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

============================================================

calling cases:

Case 1: no args calling
>>> matrix_divided()
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

Case 2: one arg calling 
>>> matrix_divided(2)
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

Case 3: one arg calling "div"
>>> matrix_divided(div=2)
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 1 required positional argument: 'matrix'

