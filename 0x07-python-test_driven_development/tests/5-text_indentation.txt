Test cases for 5-text_indentation module
===================================

The function must sepreate a text using , : ? into lines and remove all the spaces at the start of the text

import the module:
>>> txt = __import__('5-text_indentation').text_indentation

Case 1: correct text with leading spaces
>>> strr = " hello, how are you? My name is: hiba and my age is 233!"
>>> txt(strr)
hello, how are you?
<BLANKLINE>
My name is:
<BLANKLINE>
hiba and my age is 233!

========================================================

Case 2: int
>>> strr = 9
>>> txt(strr)
Traceback (most recent call last):
    ...
TypeError: text must be a string

========================================================

Case 3: float
>>> strr = 9.4
>>> txt(strr)
Traceback (most recent call last):
    ...
TypeError: text must be a string

========================================================

Case 4: list
>>> strr = [2, 4]
>>> txt(strr)
Traceback (most recent call last):
    ...
TypeError: text must be a string

========================================================

Case 5: tuple
>>> strr = (3, 5)
>>> txt(strr)
Traceback (most recent call last):
    ...
TypeError: text must be a string

========================================================

Case 6: char with space
>>> strr = '	C:       H'
>>> txt(strr)
C:
<BLANKLINE>
H

========================================================

Case 7: None as string
>>> txt(None)
Traceback (most recent call last):
    ...
TypeError: text must be a string


========================================================

Case 8: only spaces
>>> txt("          ")


============================================================

Case 9: spaces at the end
>>> txt("Hiba.       ")
Hiba.
<BLANKLINE>

=============================================================

Case 10: Mixed string
>>> txt("      Hiba.        How:        ")
Hiba.
<BLANKLINE>
How:
<BLANKLINE>

============================================================

Case 11: not adding any . ? :
>>> txt("I think I love TDD")
I think I love TDD

===========================================================

Case 12: adding \n to the string
>>> txt("hello\nworld")
hello
world

===========================================================

Case 13: mixed string
>>> txt("Hello.  Mr,Brown\n\n\n\n   Hope you are ok? am fine.")
Hello.
<BLANKLINE>
Mr,Brown
<BLANKLINE>
<BLANKLINE>
<BLANKLINE>
Hope you are ok?
<BLANKLINE>
am fine.
<BLANKLINE>

==============================================================

Case 14: alx test case
>>> txt("""Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere? Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud: Plus semper voluptatis? Teneo, inquit, finem illi videri nihil dolere. Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens. Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo stadia confecimus. Sin aliud quid voles, postea. Quae animi affectio suum cuique tribuens atque hanc, quam dico. Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres""")
Lorem ipsum dolor sit amet, consectetur adipiscing elit.
<BLANKLINE>
Quonam modo?
<BLANKLINE>
Utrum igitur tibi litteram videor an totas paginas commovere?
<BLANKLINE>
Non autem hoc:
<BLANKLINE>
igitur ne illud quidem.
<BLANKLINE>
Fortasse id optimum, sed ubi illud:
<BLANKLINE>
Plus semper voluptatis?
<BLANKLINE>
Teneo, inquit, finem illi videri nihil dolere.
<BLANKLINE>
Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens.
<BLANKLINE>
Si id dicis, vicimus.
<BLANKLINE>
Inde sermone vario sex illa a Dipylo stadia confecimus.
<BLANKLINE>
Sin aliud quid voles, postea.
<BLANKLINE>
Quae animi affectio suum cuique tribuens atque hanc, quam dico.
<BLANKLINE>
Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres

